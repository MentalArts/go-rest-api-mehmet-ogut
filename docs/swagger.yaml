basePath: /api/v1
definitions:
  models.Author:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Book:
    properties:
      author:
        $ref: '#/definitions/models.Author'
      author_id:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      isbn:
        type: string
      publication_year:
        type: integer
      reviews:
        items:
          $ref: '#/definitions/models.Review'
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.Review:
    properties:
      book_id:
        type: integer
      comment:
        type: string
      created_at:
        type: string
      date_posted:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      rating:
        type: integer
      updated_at:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: API for managing books, authors, and reviews
  title: Bookstore API
  version: "1.0"
paths:
  /authors:
    get:
      description: Get the list of all authors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Author'
            type: array
      summary: Get all authors
      tags:
      - Authors
    post:
      consumes:
      - application/json
      description: Create a new author with name and email
      parameters:
      - description: Author object
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/models.Author'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Author'
      summary: Create a new author
      tags:
      - Authors
  /authors/{id}:
    delete:
      description: Delete an author by ID
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Delete an author
      tags:
      - Authors
    get:
      description: Get an author by ID
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Author'
      summary: Get a single author
      tags:
      - Authors
    put:
      consumes:
      - application/json
      description: Update an author's details
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated author object
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/models.Author'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Author'
      summary: Update an author
      tags:
      - Authors
  /books:
    get:
      description: Get the list of all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Get all books
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Add a new book with title, author, and other details
      parameters:
      - description: Book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
      summary: Create a new book
      tags:
      - Books
  /books/{id}/reviews:
    get:
      description: Get all reviews associated with a specific book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
      summary: Get all reviews for a book
      tags:
      - Reviews
    post:
      consumes:
      - application/json
      description: Add a review to a book
      parameters:
      - description: Review object
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.Review'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Review'
      summary: Create a new review
      tags:
      - Reviews
  /books{id}:
    delete:
      description: Delete a book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Delete a book
      tags:
      - Books
    get:
      description: Get details of a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: Get a book by ID
      tags:
      - Books
    put:
      consumes:
      - application/json
      description: Update a bookâ€™s details
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: Update a book
      tags:
      - Books
swagger: "2.0"
